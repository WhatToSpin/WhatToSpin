name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'draft'
        type: choice
        options:
        - draft
        - prerelease
        - release

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
          - os: windows-latest
            platform: win
            arch: ia32
          - os: macos-latest
            platform: mac
            arch: x64
          - os: macos-latest
            platform: mac
            arch: arm64
          - os: ubuntu-latest
            platform: linux
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run build:${{ matrix.platform }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-build
          path: |
            dist/*.exe
            dist/*.msi
            dist/latest.yml

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-build
          path: |
            dist/*.dmg
            dist/*.zip
            dist/latest-mac.yml

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-build
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/latest-linux.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -name "*.exe" -exec cp {} release/ \;
          find artifacts -name "*.msi" -exec cp {} release/ \;
          find artifacts -name "*.dmg" -exec cp {} release/ \;
          find artifacts -name "*.zip" -exec cp {} release/ \;
          find artifacts -name "*.AppImage" -exec cp {} release/ \;
          find artifacts -name "*.deb" -exec cp {} release/ \;
          find artifacts -name "*.rpm" -exec cp {} release/ \;
          find artifacts -name "latest*.yml" -exec cp {} release/ \;
          ls -la release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && success()
    
    steps:
      - name: Notify completion
        run: |
          echo "Release ${{ github.ref_name }} has been published successfully!"
          echo "Check the release at: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"